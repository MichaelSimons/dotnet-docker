parameters:
  setupImageBuilder:  true

steps:
- script: echo "##vso[task.setvariable variable=artifactsPath]c:\artifacts
  displayName: Define Artifacts Path Variable

- ${{ if eq(variables['System.TeamProject'], 'internal') }}:
  - script: echo '##vso[task.setvariable variable=imageBuilderImageInfoArg]--image-info-output-path $(artifactsPath)/$(legName)-image-info.json
    displayName: Set Image Info Arg for Image Builder
- ${{ if eq(variables['System.TeamProject'], 'public') }}:
  - script: echo '##vso[task.setvariable variable=imageBuilderImageInfoArg]
    displayName: Set Image Info Arg for Image Builder

  ################################################################################
  # Cleanup Docker Resources
  ################################################################################
- template: cleanup-docker-windows.yml

  ################################################################################
  # Setup Image Builder (Optional)
  ################################################################################
- ${{ if eq(parameters.setupImageBuilder, 'true') }}:
  - powershell: $(engCommonPath)/Invoke-WithRetry.ps1 "docker pull $(imageNames.imagebuilder.windows)"
    displayName: Pull Image Builder
  - script: >
      docker build
      -t $(imageNames.imageBuilder.withrepo)
      --build-arg IMAGE=$(imageNames.imageBuilder.windows)
      -f $(engCommonPath)/Dockerfile.WithRepo .
    displayName: Build Image for Image Builder
  - script: >
      echo "##vso[task.setvariable variable=runImageBuilderCmd]
      docker run --rm
      -v \\.\pipe\docker_engine:\\.\pipe\docker_engine
      -v $(Build.ArtifactStagingDirectory):$(artifactsPath)
      -w /repo
      $(imageNames.imageBuilder.withrepo)
    displayName: Define runImageBuilderCmd Variable
